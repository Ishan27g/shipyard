---

name: Build
on: [push]
jobs:
  build:
    env:
      GONOSUMDB: "github.com/moby/moby"
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Setup Go version
        uses: actions/setup-go@v1
        with:
          go-version: 1.15.2

      - name: Get dependencies
        run: |
          go version
          go get -v -t ./...

      - name: Unit Test
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic -short ./...

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v1
        with:
          version: v0.147.2
          args: release --rm-dist --snapshot
          key: ${{ secrets.GPG_PRIVATE_KEY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: shipyard
          path: |
            dist/shipyard_darwin_amd64
            dist/shipyard_linux_amd64
            dist/shipyard_linux_arm64
            dist/shipyard_linux_arm_7
            dist/shipyard_linux_arm_6
            dist/shipyard_windows_amd64

      - name: Upload Code Coverage
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # required

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}

  functional_test:
    name: Functional Test
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        folder: [
          './examples/container',
          './examples/build',
          './examples/docs',
          './examples/modules',
          './examples/single_k3s_cluster',
          './examples/nomad',
        ]

    steps:
      - uses: actions/checkout@v2

      - name: Setup Go version
        uses: actions/setup-go@v1
        with:
          go-version: 1.15.2

      - name: Run tests
        run: |
          go run main.go purge
          go run main.go test ${{matrix.folder}}

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}

  e2e_linux:
    name: Linux E2E Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      - name: Setup Go version
        uses: actions/setup-go@v1
        with:
          go-version: 1.15.2

      - name: E2E test for build binary
        run: make test_e2e_cmd

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}

  e2e_mac:
    name: Mac E2E Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          token: '${{ secrets.GH_TOKEN }}'
          repository: shipyard-run/shipyard-mac-build
          event-type: test
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}

  tag:
    name: Tag latest release
    runs-on: ubuntu-latest
    needs: 
      - build
      - functional_test
      - e2e_mac
      - e2e_linux
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} 
      
      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          description: "Automatically tagged main branch with new tag: ${{ steps.tag_version.outputs.new_tag }}"
