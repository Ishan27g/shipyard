---

name: Build And Deploy
on: [push]
jobs:
  test:
    env:
      GONOSUMDB: "github.com/moby/moby"
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Setup Go version
        uses: actions/setup-go@v1
        with:
          go-version: 1.16.3

      #- name: Get dependencies
      #  run: |
      #    go version
      #    go get -v -t ./...

      #- name: Unit Test
      #  run: |
      #    go test -v -race -coverprofile=coverage.txt -covermode=atomic -short ./...

      #- name: Upload Code Coverage
      #  uses: codecov/codecov-action@v1
      #  with:
      #    token: ${{ secrets.CODECOV_TOKEN }}  # required

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          tile: ${{ github.job_id }}

  #functional_test:
  #  name: Functional Test
  #  runs-on: ubuntu-latest
  #  needs: test

  #  strategy:
  #    matrix:
  #      folder: [
  #        './examples/container',
  #        './examples/build',
  #        './examples/docs',
  #        './examples/modules',
  #        './examples/single_k3s_cluster',
  #        './examples/multiple_k3s_clusters',
  #        './examples/nomad',
  #        './examples/local_exec',
  #      ]

  #  steps:
  #    - uses: actions/checkout@v2

  #    - name: Setup Go version
  #      uses: actions/setup-go@v1
  #      with:
  #        go-version: 1.16.3

  #    - name: Run tests
  #      run: |
  #        go run main.go purge
  #        go run main.go test ${{matrix.folder}}

  #    - name: Send status to Discord
  #      uses: sarisia/actions-status-discord@v1
  #      if: always()
  #      with:
  #        webhook: ${{ secrets.DISCORD_WEBHOOK }}
  #        tile: ${{ github.job_id }}
  #        description: "Functional tests for ${{matrix.folder}}"

  e2e_linux:
    name: Linux E2E Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v2

      - name: Setup Go version
        uses: actions/setup-go@v1
        with:
          go-version: 1.16.3

      - name: E2E test for build binary
        run: make test_e2e_cmd

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          tile: ${{ github.job_id }}
          description: "End to end tests for Linux"

  e2e_mac:
    name: Mac E2E Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          token: '${{ secrets.GH_TOKEN }}'
          repository: shipyard-run/shipyard-mac-build
          event-type: test
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          tile: ${{ github.job_id }}
          description: "End to end tests for MacOS amd64"

  build_dev:
    name: Build Dev Version
    needs:
      - test
      #- functional_test
      #- e2e_mac
      #- e2e_linux
    if: ${{ github.ref != 'refs/heads/main' }}

    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Setup Go version
        uses: actions/setup-go@v1
        with:
          go-version: 1.16.3

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v1
        with:
          version: v0.172.1
          args: release --rm-dist --snapshot
          key: ${{ secrets.GPG_PRIVATE_KEY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: shipyard
          path: |
            dist/shipyard_darwin_arm64
            dist/shipyard_darwin_amd64
            dist/shipyard_linux_amd64
            dist/shipyard_linux_arm64
            dist/shipyard_linux_arm_7
            dist/shipyard_linux_arm_6
            dist/shipyard_windows_amd64

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          tile: ${{ github.job_id }}
          description: "Build dev version and upload artifacts"

  tag:
    name: Tag latest release
    runs-on: ubuntu-latest
    needs:
      - test
      #- functional_test
      - e2e_mac
      - e2e_linux
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          description: "Automatically tagged main branch with new tag: ${{ steps.tag_version.outputs.new_tag }}"

    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}

  notorize_mac:
    name: Notrize binaries for Mac
    needs: build_dev
    if: ${{ github.ref != 'refs/heads/main' }}
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Download-Binaries
      uses: actions/download-artifact@v2
      with:
        name: shipyard
        path: dist/
    
    - name: Import Code-Signing Certificates
      uses: Apple-Actions/import-codesign-certs@v1
      with:
        # The certificates in a PKCS12 file encoded as a base64 string
        p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
        # The password used to import the PKCS12 file.
        p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
    
    - name: List identities
      run: |
        security find-identity

    - name: Install gon via HomeBrew for code signing and app notarization
      run: |
        brew tap mitchellh/gon
        brew install mitchellh/gon/gon

    - name: Sign the Arm64 Mac binaries with Gon
      env:
        AC_USERNAME: ${{ secrets.AC_USERNAME }}
        AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
      run: |
        gon -log-level=debug -log-json ./.gon_arm64.json
    
    - name: Sign the Arm64 Mac binaries with Gon
      env:
        AC_USERNAME: ${{ secrets.AC_USERNAME }}
        AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
      run: |
        gon -log-level=debug -log-json ./.gon_amd64.json
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: shipyard_osx
        path: |
          dist/shipyard_arm64.dmg
          dist/shipyard_arm64.zip
          dist/shipyard_amd64.dmg
          dist/shipyard_amd64.zip

    - name: Send status to Discord
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        tile: ${{ github.job_id }}
        description: "Notorize Mac applications"

  build_prod:
    name: Build Prod Version
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.tag.outputs.new_tag }}

      - name: Setup Go version
        uses: actions/setup-go@v1
        with:
          go-version: 1.16.3

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v1
        with:
          version: v0.164.0
          args: release --rm-dist
          key: ${{ secrets.GPG_PRIVATE_KEY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          tile: ${{ github.job_id }}
          description: "Build prod version and upload artifacts"

    outputs:
      new_tag: ${{ needs.tag.outputs.new_tag }}


  choco:
    runs-on: windows-latest
    needs: build_prod
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: 'shipyard-run/choco'

      - name: Install dependencies
        run: |
          choco install checksum -y
          choco install wget -y

      - name: Tag
        id: tag
        uses: ashley-taylor/regex-property-action@v1.0
        with:
          value: ${{ needs.build_prod.outputs.new_tag }}
          regex: "v"
          replacement: ""

      - name: Replace checksum
        run: |
          wget "https://github.com/shipyard-run/shipyard/releases/download/v${{ steps.tag.outputs.value }}/shipyard_${{ steps.tag.outputs.value }}_Windows_x86_64.zip"
          powershell -Command "(gc tools/chocolateyinstall.ps1) -replace '__checksum__', '$(checksum -t sha256 -f shipyard_${{ steps.tag.outputs.value }}_Windows_x86_64.zip)' | Out-File -encoding ASCII tools/chocolateyinstall.ps1"

      - name: Replace version
        run: |
          powershell -Command "(gc shipyard.nuspec) -replace '__version__', '${{ steps.tag.outputs.value }}' | Out-File -encoding ASCII shipyard.nuspec"
          powershell -Command "(gc tools/chocolateyinstall.ps1) -replace '__version__', '${{ steps.tag.outputs.value }}' | Out-File -encoding ASCII tools\chocolateyinstall.ps1"

      - name: Choco login
        run: choco apikey -k ${{ secrets.CHOCO_API_KEY }} -s https://push.chocolatey.org/

      - name: Choco build
        run: choco pack

      - name: Choco push
        run: choco push -f

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          tile: ${{ github.job_id }}
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          description: "Push new version ${{ needs.tag.outputs.outputs.new_tag }} to Chocolatey"

  apt:
    needs: build_prod
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64.deb", "arm64.deb", "armv7.deb", "amd64.rpm", "arm64.rpm", "armv7.rpm"]

    steps:
    - name: Tag
      id: tag
      uses: ashley-taylor/regex-property-action@v1.0
      with:
        value: ${{ needs.build_prod.outputs.new_tag }}
        regex: "v"
        replacement: ""

    - name: Download release
      run: |
        wget "https://github.com/shipyard-run/shipyard/releases/download/v${{ steps.tag.outputs.value }}/shipyard_${{ steps.tag.outputs.value }}_linux_${{ matrix.arch }}"

    - name: Upload release
      run: |
        curl -F package=@shipyard_${{ steps.tag.outputs.value }}_linux_${{ matrix.arch }} https://${{ secrets.FURY_TOKEN }}@push.fury.io/shipyard-run/

    - name: Send status to Discord
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        tile: ${{ github.job_id }}
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        description: "Push new version ${{ needs.build_prod.outputs.new_tag }} to Apt"

  update_website:
    needs: build_prod
    runs-on: ubuntu-latest

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          repository: 'shipyard-run/shipyard-website'
          token: '${{ secrets.GH_TOKEN }}'

      - name: Configure Git
        run: |
          git config user.email "mail@shipyard.run"
          git config user.name "Shipyard Bot"

      - name: Tag
        id: tag
        uses: ashley-taylor/regex-property-action@v1.0
        with:
          value: ${{ needs.build_prod.outputs.new_tag }}
          regex: "v"
          replacement: ""

      - name: Write version
        run: |
          echo "${{ steps.tag.outputs.value }}" > ./static/latest

      - name: Push update
        run: |

          git add .
          git commit -m "Update version to ${{ steps.tag.outputs.value}}"
          git push

      - name: Send status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          tile: ${{ github.job_id }}
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          description: "Update website with latest version ${{ needs.build_prod.outputs.new_tag }}"
